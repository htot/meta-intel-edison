From 57071442714598fb16ed6265668e27045da3bb5d Mon Sep 17 00:00:00 2001
From: Ferry Toth <ftoth@exalondelft.nl>
Date: Wed, 26 Feb 2020 22:51:38 +0100
Subject: [PATCH] sketch_reset: port to gpiod

Signed-off-by: Ferry Toth <ftoth@exalondelft.nl>
---
 Makefile                      |   8 +-
 galileo-reset/galileo-reset.c | 178 +++++++++-------------------------
 2 files changed, 49 insertions(+), 137 deletions(-)

diff --git a/Makefile b/Makefile
index 8407e9e..c3ed6ea 100755
--- a/Makefile
+++ b/Makefile
@@ -17,15 +17,15 @@ RST_SRC = ./galileo-reset/galileo-reset.c
 IDIR =.
 
 ifdef CROSS_COMPILE
-CFLAGS=-I$(IDIR) -I$(IDIR)/../ -I../lib  -D_XOPEN_SOURCE  -DLOCALEDIR=\"/usr/local/share/locale\" -DNFGVMIN -DHAVE_CONFIG_H -DCLANTON_LOADER -g -Wall  -std=c99 -m32 -Os -march=pentium -ffunction-sections
+#CFLAGS=-I$(IDIR) -I$(IDIR)/../ -I../lib  -D_XOPEN_SOURCE  -DLOCALEDIR=\"/usr/local/share/locale\" -DNFGVMIN -DHAVE_CONFIG_H -DCLANTON_LOADER -g -Wall -std=c99 -m32 -march=pentium -Os -ffunction-sections
 else
-CFLAGS=-I$(IDIR) -I$(IDIR)/../ -I../lib   -D_XOPEN_SOURCE  -DNFGVMIN -DHAVE_CONFIG_H -DCLANTON_LOADER -g -Wall  -std=c99  -Os  -ffunction-sections
+#CFLAGS+=-I$(IDIR) -I$(IDIR)/../ -I../lib   -D_XOPEN_SOURCE  -DNFGVMIN -DHAVE_CONFIG_H -DCLANTON_LOADER -g -Wall  -std=c99  -Os  -ffunction-sections
 endif
-
+CFLAGS+=-DNFGVMIN -DCLANTON_LOADER
 all: clloader sketch_reset
 
 ODIR=.
-LIBS=
+LIBS=-l gpiod
 
 DEPEND = $(SRC:.c=.d)
 
diff --git a/galileo-reset/galileo-reset.c b/galileo-reset/galileo-reset.c
index 3c88b7b..62b205b 100644
--- a/galileo-reset/galileo-reset.c
+++ b/galileo-reset/galileo-reset.c
@@ -1,4 +1,4 @@
-/* 
+/*
  * Application listens to galileo reset pin.
  * If pressed it terminates the clloader application.
  *
@@ -19,36 +19,54 @@
 #include <getopt.h>
 #include <unistd.h>
 #include <string.h>
+#include <gpiod.h>
 
 
 #include "galileo-reset.h"
 
-int gpio_fd;
-fd_set fs_except_set;
-int ret;
-unsigned char gpio_value;
-unsigned char gpio_initial_value;
-int reset_active=0;
+typedef struct {
+    char chip[GPIO_STRING_LEN];
+    unsigned int line;
+} gpio_line;
 
+int Verbose=0;
+char *reset_script_path = NULL;
+
+int event_cb(int event, unsigned int offset, const struct timespec *timestamp, void *unused)
+{
+    if (Verbose >=2)
+        printf("Select event received : from GPIO interrupt pin\n");
+    if(event == GPIOD_CTXLESS_EVENT_CB_FALLING_EDGE) {
+        if (Verbose)
+            printf("Sketch Reset button pressed:\n");
+    };
+    if(event == GPIOD_CTXLESS_EVENT_CB_RISING_EDGE) {
+        if (Verbose)
+            printf("Sketch Reset button released: Calling %s\n", reset_script_path);
+        if(system(reset_script_path) < 0) perror(reset_script_path);
+    };
+    if(event == GPIOD_CTXLESS_EVENT_CB_TIMEOUT) {
+        fprintf(stderr,"select timeout\n");
+    };
+
+    return GPIOD_CTXLESS_EVENT_CB_RET_OK;
+}
 
 int main(int argc, char * argv[])
 {
-    
-    char gpio_str[GPIO_STRING_LEN];
-    int Verbose=0;
     int arg;
+    gpio_line input, output;
     int input_gpio = -1, output_gpio = -1;
-    char *reset_script_path = NULL;
 
     while ((arg = getopt(argc, argv, ":vi:o:s:")) != -1) {
 	    switch (arg) {
 	    case 'i':
 		    /* Set the GPIO for reset input signal from shield */
-		    input_gpio = atoi(optarg);
+                    input_gpio = gpiod_ctxless_find_line(optarg, input.chip, sizeof(input.chip), &input.line);
 		    break;
 	    case 'o':
 		    /* Set the GPIO for reset output signal to shield */
-		    output_gpio = atoi(optarg);
+                    output_gpio = gpiod_ctxless_find_line(optarg, output.chip, sizeof(output.chip), &output.line);
 		    break;
 	    case 's':
 		    /* Set the sketch reset script path */
@@ -62,12 +80,12 @@ int main(int argc, char * argv[])
 	    }/* switch(arg) */
     }
 
-    if (input_gpio < 0){
-	    printf("Shield reset input GPIO invalid or not specified (%d)\n", input_gpio);
+    if (input_gpio <= 0){
+	    printf("Shield reset input GPIO invalid or not specified\n");
 	    exit(1);
     }
-    if (output_gpio < 0){
-	    printf("Shield reset output GPIO invalid or not specified (%d)\n", output_gpio);
+    if (output_gpio <= 0){
+	    printf("Shield reset output GPIO invalid or not specified\n");
 	    exit(1);
     }
     if (reset_script_path == NULL){
@@ -80,123 +98,17 @@ int main(int argc, char * argv[])
     }
 
     /*
-     * Sheld output reset
+     * Set shield reset line low/high to reset all shields
      */
-    
-    sprintf(gpio_str,"echo  %d  > %s ", output_gpio , GPIO_SYS_EXPORT_STRING);
-    if (Verbose >=2 )
-      printf("Exec:%s\n",gpio_str);
-    system(gpio_str);
-    
-    //  set   /sys/class/gpio/gpioN/direction out
-    sprintf(gpio_str,"echo out > %s/gpio%d/direction ", GPIO_SYS_BASE_STRING, output_gpio);
-    if (Verbose >=2 )
-      printf("Exec:%s\n",gpio_str);
-    system(gpio_str);
-    
-    /*
-     * Set sheld reset line low/high to reset all shields
-     */
-    
-    sprintf(gpio_str,"echo 0 > %s/gpio%d/value ", GPIO_SYS_BASE_STRING, output_gpio);
-    if (Verbose >=2 )
-      printf("Exec:%s\n",gpio_str);
-    system(gpio_str);
-    sprintf(gpio_str,"echo 1 > %s/gpio%d/value ", GPIO_SYS_BASE_STRING, output_gpio);
-
-    if (Verbose >=2 )
-      printf("Exec:%s\n",gpio_str);
-    system(gpio_str);
-    
-            
-    sprintf(gpio_str,"echo  %d  > %s ", input_gpio, GPIO_SYS_EXPORT_STRING);
-    if (Verbose >=2 )
-      printf("Exec:%s\n",gpio_str);
-    system(gpio_str);
-    
-
-   //    /sys/class/gpio/gpioN/direction in
-    
-    sprintf(gpio_str,"echo in > %s/gpio%d/direction ", GPIO_SYS_BASE_STRING, input_gpio);
-    if (Verbose >=2 )
-      printf("Exec:%s\n",gpio_str);
-    system(gpio_str);
-
-  
-   //    /sys/class/gpio/gpioN/edge both
-   // falling only not supported by cy8c9540a driver
-    sprintf(gpio_str,"echo both > %s/gpio%d/edge ", GPIO_SYS_BASE_STRING, input_gpio);
-    if (Verbose >=2 )
-   	printf("Exec:%s\n",gpio_str);
-    system(gpio_str);
-           
-    
-    sprintf(gpio_str,"%s/gpio%d/value", GPIO_SYS_BASE_STRING, input_gpio);
-    if (Verbose >=2 )
-      printf("Opening for select:%s\n",gpio_str);
-
-    gpio_fd = open(gpio_str,O_RDWR);
-    if( gpio_fd < 0 ) {
-        /* no file found */
-        fprintf(stderr,"Failed to open:%s\n",gpio_str);
-        exit(EXIT_FAILURE);
-    }
+    gpiod_ctxless_set_value (output.chip, output.line, 0, 0, argv[0], NULL, NULL);
+    gpiod_ctxless_set_value (output.chip, output.line, 1, 0, argv[0], NULL, NULL);
+    if (Verbose >=2)
+        printf("Toggle reset line\n");
+
+    // in
+    gpiod_ctxless_event_monitor(input.chip, GPIOD_CTXLESS_EVENT_BOTH_EDGES,
+                                input.line, 0, argv[0], NULL, NULL, event_cb, NULL);
 
-    lseek(gpio_fd,0,SEEK_SET);
-    read(gpio_fd,&gpio_value,1);
-    gpio_initial_value=gpio_value;
-    if (Verbose >=2 )
-      printf("Gpio val:%d\n",gpio_value);
-
-
-    while(1) {
- 
-        /* zero */
-    	FD_ZERO(&fs_except_set);
-        
-   	 /* Add elements */
-   	 FD_SET(gpio_fd, &fs_except_set);
-        
-    	ret = select(gpio_fd+1, 0,0,&fs_except_set, 0); /* Max fd + 1 */
-    	if (Verbose >=2 )
-      	    printf("Select event received : returned:%d\n",ret);
-        
-	/* Receive bytes */
-        switch(ret){
-		case -1:
-			fprintf(stderr, "critical fault during select errno=%d", errno);
-			break;
-		case 0:
-			/* timeout */
-			fprintf(stderr,"select timeout\n");
-			break;
-		default:
-			/* Process data */
-			if(FD_ISSET(gpio_fd, &fs_except_set)){
-      			    if (Verbose >=2 )
-				printf("Select event received : from GPIO interrupt pin\n");
-			    lseek(gpio_fd,0,SEEK_SET);
-			    read(gpio_fd,&gpio_value,1);
-    			    if (Verbose >=2 )
-				printf("Gpio val:%d\n",gpio_value);
-
-			    if ( reset_active == 0 ) { 
-				  if ( gpio_value != gpio_initial_value) {
-				      reset_active = 1; //
-    				      if (Verbose)
-					  printf("Sketch Reset button pressed:\n");
-				  }
-			     }
-			     else {
-				reset_active = 0; 
-    				if (Verbose)
-				    printf("Sketch Reset button released: Calling %s\n", reset_script_path);
-				system(reset_script_path);
-			     }
-			}
-        }
-   }
-    
-  return 0;
+    return EXIT_SUCCESS;
 }
 
-- 
2.20.1

